#include <iostream>
//Check for basics of C++ ... http://www.cplusplus.com/doc/tutorial/program_structure/
//For all you need the cplusplus.com has the templates of the data structures? 
using namespace std;

template <class T>
class Stack {
  private:
    T *arr;
    int pt, cap;
  public:
      Stack(int capacity) {//constructor
        arr = new T[cap = capacity]
        pt = -1;
      }

      ~Stack() { //destructor
        delete arr;
      }

      T pop() {
        if (pt == -1) {
          throw "stack empty"
        }
        T elem = arr[pt--];
        return elem;
      }

      void push(T elem) {
        if (pt == capacity() - 1) {
          throw "stack full"
        }
        arr[++pt] = elem;
      }

      int len() {
        return pt + 1;
      }

      int capacity() {//what does capacity reveal.
        return cap;
      }
};

int  main() {
  Stack<int> stack(10);
  for (int i = 1; i <  5; i ++) {
    stack.push(i);
  }
  for (int i = 1; i < 5; i ++) {
    cout << stack.pop();
  }
  return 0;
}
/*
  //Here's a C++ Stack in practice...
  //May have some errors and I don't own the material
  void sort(vector<int> &oldVec, vector<int> &newVec){
    int main(){
      vector<int> unsorted, sorted;
      unsorted.push_back(5); unsorted.push_back(1); unsorted.push_back(3);
      sort(unsorted, sorted);
      for (int i : sorted){
        cout << i << ", ";
      }
      cout << end1;
      return 0;
    }
    void sort(vector<int> &oldVec, vector<int> &newVec){
      if (oldVec.size() == 0) return;
      for (vector<int>::iterator it = newVec.begin(); it < newVec.end(); it++) {
        if (oldVec[0] <= *it){
          newVec.insert(it,oldVec[0]);
          oldVec.erase(oldVec.begin());
          sort(oldVec, newVec);
          return;
        }
      }
      newVec.push_back(oldVec[0]);
      oldVec.erase(oldVec.begin());
      sort(oldVec, newVec);
    }
  }*/
